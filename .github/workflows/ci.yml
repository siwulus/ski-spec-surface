name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/*.md" # Wszystkie pliki markdown
      - "docs/**" # Folder dokumentacji
      - ".ai/**" # Plany i specyfikacje AI
      - ".cursor/**" # Cursor IDE config
      - ".claude/**" # Claude config
      - ".vscode/**" # VSCode config
      - "coverage/**" # Generowane coverage reports
      - "playwright-report/**" # Generowane playwright reports
      - "test-results/**" # Generowane test results
      - "LICENSE"
      - ".gitignore"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**/*.md" # Wszystkie pliki markdown
      - "docs/**" # Folder dokumentacji
      - ".ai/**" # Plany i specyfikacje AI
      - ".cursor/**" # Cursor IDE config
      - ".claude/**" # Claude config
      - ".vscode/**" # VSCode config
      - "coverage/**" # Generowane coverage reports
      - "playwright-report/**" # Generowane playwright reports
      - "test-results/**" # Generowane test results
      - "LICENSE"
      - ".gitignore"

# Cancel previous runs for the same PR/branch when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality Checks (Linting and Type Checking)
  code_quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        # Version is automatically read from package.json's "packageManager" field

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Run type check
        run: pnpm type-check

  # Job 2: Unit and Integration Tests with Coverage
  unit_tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: code_quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        # Version is automatically read from package.json's "packageManager" field

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
          retention-days: 30
  # Job 3: E2E Tests with Playwright
  e2e_tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: code_quality
    environment: e2e-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        # Version is automatically read from package.json's "packageManager" field

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Chromium browser
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: Install Chromium system dependencies (if cached)
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: Create .env.e2e file
        run: |
          cat > .env.e2e << EOF
          SUPABASE_URL=${{ vars.SUPABASE_URL }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          PUBLIC_SUPABASE_URL=${{ vars.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY=${{ secrets.PUBLIC_SUPABASE_KEY }}  
          E2E_USERNAME_ID=${{ secrets.E2E_USERNAME_ID }}
          E2E_USERNAME=${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD=${{ secrets.E2E_PASSWORD }}
          EOF

      - name: Run E2E tests
        run: pnpm test:e2e
      - name: Upload Playwright HTML report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  # Job 4: Production Build
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        # Version is automatically read from package.json's "packageManager" field

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build production (Cloudflare adapter)
        run: pnpm build:cf
        env:
          BUILD_ENV: cloudflare

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

      - name: Add build status to workflow summary
        run: |
          echo "## ðŸ“¦ Production Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Production build completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Adapter: Cloudflare Pages" >> $GITHUB_STEP_SUMMARY
          echo "- Output: \`dist/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Mode: SSR (Server-Side Rendering)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Job 5: Deploy to Cloudflare Pages (only on main branch push)
  deploy_cloudflare:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        # Version is automatically read from package.json's "packageManager" field

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=ski-spec-surface --commit-dirty=true
          packageManager: pnpm

      - name: Deployment summary
        run: |
          echo "### ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Application deployed to Cloudflare Pages." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** ski-spec-surface" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** main" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
