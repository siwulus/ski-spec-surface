---
alwaysApply: false
---
# AI Rules for Ski Surface Spec Extension

Ski Surface Spec Extension is a web application created for advanced ski touring and freeride skiers, which supplements standard ski specifications with two key parameters: ski surface area and relative weight. The application enables users to input technical ski data, automatically calculate missing parameters, and compare different ski models on uniform principles.

## Tech Stack

- Astro 5
- TypeScript 5
- React 19
- Tailwind 4
- Shadcn/ui
- pnpm as package manager
- Vitest + React Testing Library for unit and integration tests
- Playwright for e2e tests

## Project Structure

When introducing changes to the project, always follow the directory structure below:

```text
public/                  # public assets
src/
├── components/          # Astro (static) and React (dynamic) components
│   ├── auth/
│   │   ├── PasswordStrengthIndicator.tsx
│   │   └── PasswordStrengthIndicator.spec.tsx  # Co-located unit test
│   └── ui/             # Shadcn/ui components
├── db/                 # Supabase clients and database types
│   ├── supabase.client.ts    # Initialized Supabase client
│   └── database.types.ts     # Generated DB types
├── layouts/            # Astro layouts
├── lib/                # Services and helpers
│   └── services/       # Business logic services
│       ├── SkiSpecService.ts
│       └── SkiSpecService.spec.ts  # Co-located unit test
├── middleware/         # Astro middleware (Supabase injection, auth)
├── pages/              # Astro pages and API routes
│   └── api/            # RESTful API endpoints
├── styles/             # Global CSS
├── test/               # Test setup and utilities
│   ├── setup.ts        # Global test configuration
│   └── test-utils.tsx  # Custom render functions for React Testing Library
└── types/              # TypeScript type definitions
    ├── db.types.ts     # Database entities
    └── api.types.ts    # DTOs, Commands, Queries, Responses

tests/
├── e2e/                # Playwright E2E tests (*.spec.ts)
├── integration/        # Integration tests (*.integration.spec.ts)
└── fixtures/           # Test fixtures and helpers
    ├── test-fixtures.ts      # Playwright custom fixtures
    └── accessibility.ts      # Accessibility testing helpers
└── poms/               # Playwright page object models
    └── HomePage.ts     # Playwright POM for home page, etc
```

When modifying the directory structure, always update this section.

## Code Style Guidelines

### Functional Programming with EffectJS

**Primary error handling approach** - Use EffectJS for all API routes, service methods, and complex logic:

- Use `pipe()` for composing operations (Railway-Oriented Programming)
- Use `Effect.flatMap()` for operations that return Effect
- Use `Effect.map()` for transformations
- Use `Effect.catchTag()` or `catchAllSkiSpecErrors()` for error handling
- No try-catch blocks or thrown exceptions
- Always provide explicit type signatures: `Effect.Effect<SuccessType, ErrorType>`

See architectural pattern #2 above and `.cursor/rules/functional-programming.mdc` for details.

### General

- Use arrow function notation where possible
- **When not using Effect**: Prioritize error handling and edge cases at the beginning of functions
- **When not using Effect**: Use early returns for error conditions (avoid nested if statements)
- Place the happy path last in functions
- Avoid unnecessary `else` statements (use if-return pattern)
- Use guard clauses for preconditions and invalid states

### TypeScript

- **Path alias**: Use `@/*` for imports (e.g., `@/types/api.types`)
- **Type safety**: Leverage TypeScript strict mode (extends `astro/tsconfigs/strict`)
- **Explicit types**: Always define return types for functions
- **No `any`**: Avoid `any` type; use `unknown` for uncertain types

## Testing Guidelines

The project has a comprehensive testing setup with three types of tests:

### Unit Tests

(Vitest + React Testing Library):

- Naming: `*.spec.{ts,tsx}`
- Location: Co-located with source files in `src/**/*.spec.{ts,tsx}`
- Test individual components, functions, and utilities in isolation
- Use `render()` from `@/test/test-utils` for React components
- Mock browser APIs (matchMedia, IntersectionObserver) are configured in `src/test/setup.ts`

### Integration Tests

(Vitest):

- Naming: `*.integration.spec.{ts,tsx}`
- Location: `tests/integration/**/*.integration.spec.{ts,tsx}`
- Test interactions between multiple components or services
- Verify end-to-end data flow within feature modules

### E2E Tests

(Playwright):

- Naming: `*.spec.ts`
- Location: `tests/e2e/**/*.spec.ts`
- Test complete user workflows in real browser (Chromium)
- Accessibility testing with `checkA11y()` helper from `tests/fixtures/accessibility.ts`
- Dev server auto-starts for E2E tests
