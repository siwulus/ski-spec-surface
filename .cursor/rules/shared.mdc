---
description: 
globs: 
alwaysApply: true
---
# AI Rules for Ski Surface Spec Extension

Ski Surface Spec Extension is a web application created for advanced ski touring and freeride skiers, which supplements standard ski specifications with two key parameters: ski surface area and relative weight. The application enables users to input technical ski data, automatically calculate missing parameters, and compare different ski models on uniform principles.

## Tech Stack

- Astro 5
- TypeScript 5
- React 19
- Tailwind 4
- Shadcn/ui
- pnpm as package manager

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - source code
- `./src/layouts` - Astro layouts
- `./src/pages` - Astro pages
- `./src/pages/api` - API endpoints
- `./src/middleware/index.ts` - Astro middleware
- `./src/db` - Supabase clients and types
- `./src/types.ts` - Shared types for backend and frontend (Entities, DTOs)
- `./src/components` - Client-side components written in Astro (static) and React (dynamic)
- `./src/components/ui` - Client-side components from Shadcn/ui
- `./src/lib` - Services and helpers 
- `./src/assets` - static internal assets
- `./public` - public assets

When modifying the directory structure, always update this section.

## Code Style Guidelines

### Functional Programming with EffectJS

**Primary error handling approach** - Use EffectJS for all API routes, service methods, and complex logic:

- Use `pipe()` for composing operations (Railway-Oriented Programming)
- Use `Effect.flatMap()` for operations that return Effect
- Use `Effect.map()` for transformations
- Use `Effect.catchTag()` or `catchAllSkiSpecErrors()` for error handling
- No try-catch blocks or thrown exceptions
- Always provide explicit type signatures: `Effect.Effect<SuccessType, ErrorType>`

See architectural pattern #2 above and `.cursor/rules/functional-programming.mdc` for details.

### General

- Use arrow function notation where possible
- **When not using Effect**: Prioritize error handling and edge cases at the beginning of functions
- **When not using Effect**: Use early returns for error conditions (avoid nested if statements)
- Place the happy path last in functions
- Avoid unnecessary `else` statements (use if-return pattern)
- Use guard clauses for preconditions and invalid states

### TypeScript

- **Path alias**: Use `@/*` for imports (e.g., `@/types/api.types`)
- **Type safety**: Leverage TypeScript strict mode (extends `astro/tsconfigs/strict`)
- **Explicit types**: Always define return types for functions
- **No `any`**: Avoid `any` type; use `unknown` for uncertain types
